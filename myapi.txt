const express = require('express');
const bodyParser = require('body-parser');
const app = express();
app.use(express.json());
 
app.use(bodyParser.json());

// In-Memory Data Store with Sample Data
let users = [
    { id: 1, username: 'john_doe', password: 'password123', email: 'john@example.com' },
    { id: 2, username: 'jane_smith', password: 'securepassword', email: 'jane@example.com' },
    { id: 3, username: 'alice_jones', password: 'alicepassword', email: 'alice@example.com' },
    { id: 4, username: 'bob_brown', password: 'bobpassword', email: 'bob@example.com' },
    { id: 5, username: 'carol_white', password: 'carolpassword', email: 'carol@example.com' }
];

let products = [
    { id: 1, name: 'Apple', category: 'Fruits', price: 0.5, stockQuantity: 100 },
    { id: 2, name: 'Milk', category: 'Dairy', price: 1.2, stockQuantity: 50 },
    { id: 3, name: 'Bread', category: 'Bakery', price: 1.0, stockQuantity: 75 },
    { id: 4, name: 'Eggs', category: 'Dairy', price: 2.5, stockQuantity: 60 },
    { id: 5, name: 'Carrot', category: 'Vegetables', price: 0.8, stockQuantity: 120 }
];

let orders = [
    { id: 1, userId: 1, productId: 2, quantity: 2, totalPrice: 2.4 },
    { id: 2, userId: 2, productId: 1, quantity: 5, totalPrice: 2.5 },
    { id: 3, userId: 3, productId: 4, quantity: 1, totalPrice: 2.5 },
    { id: 4, userId: 4, productId: 3, quantity: 3, totalPrice: 3.0 },
    { id: 5, userId: 5, productId: 5, quantity: 4, totalPrice: 3.2 }
];

// Routes for Users
app.get('/users/:userId', (req, res) => {
    const { userId } = req.params;
    const user = users.find(u => u.id == userId);
    if (!user) {
        return res.status(404).json({ message: 'User not found' });
    }
    res.json(user);
});
// Routes for Users
app.get('/users', (req, res) => {
    res.json(users);
});
// Routes for Products
//app.get('/products/:productId', (req, res) => {
//    const { productId } = req.params;
//    const product = products.find(p => p.id == productId);
//    if (!product) {
 //       return res.status(404).json({ message: 'Product not found' });
 //   }
 //   res.json(product);
//});

// Routes for Products
app.get('/products', (req, res) => {
    res.json(products);
});

// Routes for Orders
app.get('/orders/:orderId', (req, res) => {
    const { orderId } = req.params;
    const order = orders.find(o => o.id == orderId);
    if (!order) {
        return res.status(404).json({ message: 'Order not found' });
    }
    res.json(order);
}); 

// Routes for Orders
app.get('/orders', (req, res) => {
    res.json(orders);
}); 
// User Authentication Endpoints
app.post('/users/register', (req, res) => {
const { username, password, email } = req.body;
const newUser = { id: users.length + 1, username, password, email };
users.push(newUser);
res.status(201).json(newUser);
});
 
app.post('/users/login', (req, res) => {
const { username, password } = req.body;
const user = users.find(u => u.username === username && u.password === password);
if (user) {
res.status(200).json({ message: 'Login successful' });
} else {
res.status(401).json({ message: 'Invalid credentials' });
}
});
 
// Product Management Endpoints
app.post('/products', (req, res) => {
const { name, category, price, stockQuantity } = req.body;
const newProduct = { id: products.length + 1, name, category, price, stockQuantity };
products.push(newProduct);
res.status(201).json(newProduct);
});
 
//app.get('/products/:productId', (req, res) => {
//const product = products.find(p => p.id === parseInt(req.params.productId));
//if (product) {
//res.status(200).json(product);
//} else {
//res.status(404).json({ message: 'Product not found' });
//}
//});
 
// Order Processing Endpoints
app.post('/orders', (req, res) => {
const { userId, productId, quantity, totalPrice } = req.body;
const newOrder = { id: orders.length + 1, userId, productId, quantity, totalPrice };
orders.push(newOrder);
res.status(201).json(newOrder);
});
 
app.get('/orders/:orderId', (req, res) => {
const order = orders.find(o => o.id === parseInt(req.params.orderId));
if (order) {
res.status(200).json(order);
} else {
res.status(404).json({ message: 'Order not found' });
}
});
 
// User Profile Management Endpoints
app.put('/users/:userId', (req, res) => {
const user = users.find(u => u.id === parseInt(req.params.userId));
if (user) {
const { username, email } = req.body;
user.username = username;
user.email = email;
res.status(200).json(user);
} else {
res.status(404).json({ message: 'User not found' });
}
});
 
app.delete('/users/:userId', (req, res) => {
const userIndex = users.findIndex(u => u.id === parseInt(req.params.userId));
if (userIndex !== -1) {
users.splice(userIndex, 1);
res.status(204).send();
} else {
res.status(404).json({ message: 'User not found' });
}
});
 
//search for product
app.get('/products/search', (req, res) => {
  const query = req.query.name;
  if (!query) {
    return res.status(400).json({ message: 'Query parameter "name" is required' });
  }

  const results = products.filter(p => p.name.toLowerCase().includes(query.toLowerCase()));
  res.status(200).json(results);
});
 
// Filter products by category
app.get('/products/filter', (req, res) => {
const { category } = req.query;
if (!category) {
return res.status(400).json({ error: 'Category query parameter is required' });
}
const filteredProducts = products.filter(p => p.category.toLowerCase() === category.toLowerCase());
if (filteredProducts.length === 0) {
return res.status(404).json({ message: 'No products found for the given category' });
}
res.status(200).json(filteredProducts);
});
 
// Endpoint to show all data
app.get('/data', (req, res) => {
res.status(200).json({ users, products, orders });
});
 
// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
console.log(`Server is running on port ${PORT}`);
});